type Query {
  posts(query: ID): [Post!]!
  users(query: String): [User!]!
  add(a: Int!, b: Int!): Int!
  greeting(name: String): String!
  me: User!
  post: Post!
  comments: [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput): User!
  createPost(post: CreatePostInput): Post!
  createComment(comment: CreateCommentInput): Comment!
  updateUser(id: ID!, data: UpdateUser): User!
  updatePost(id: ID!, data: UpdatePost): Post!
  updateComment(id: ID!, data: UpdateComment): Comment!
  deleteUser(id: ID!): User!
  deletePost(id: ID!): Post!
  deleteComment(id: ID!): Comment!
}

type Subscription {
  demo: Int!
}

input CreateUserInput {
  name: String!
  age: Int
}

input UpdateUser {
  name: String
  age: Int
}

input UpdatePost {
  title: String
  body: String
  published: Boolean
}

input UpdateComment {
  body: String
}
input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input CreateCommentInput {
  body: String!
  author: ID!
  post: ID!
}

type User {
  id: ID!
  name: String!
  age: Int
  married: Boolean
  gpa: Float
  posts: [Post!]
  comments: [Comment!]
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]
}

type Comment {
  id: ID!
  body: String!
  author: User!
  post: Post!
}
